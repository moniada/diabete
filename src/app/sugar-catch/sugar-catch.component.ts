import { Component } from '@angular/core';
import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';

@Component({
  selector: 'app-sugar-catch',
  templateUrl: './sugar-catch.component.html',
  styleUrls: ['./sugar-catch.component.css']
})
export class SugarCatchComponent {
  originalFoodItems = [
    // Aliments sains (valid: true)
    { name: 'ÿ¨ÿ≤ÿ±', image: 'assets/img/carotte.png', valid: true },
    { name: 'ÿ∑ŸÖÿßÿ∑ŸÖ', image: 'assets/img/tomate.png', valid: true },
    { name: 'ÿ®ÿ±ŸàŸÉŸÑŸä', image: 'assets/img/broccoli.png', valid: true },
    { name: 'ÿ™ŸÅÿßÿ≠', image: 'assets/img/apple.png', valid: true },
    { name: 'ÿ£ŸÅŸàŸÉÿßÿØŸà', image: 'assets/img/avocado.png', valid: true },
    { name: 'ÿÆŸäÿßÿ±', image: 'assets/img/cucumber.jpg', valid: true },
    { name: 'ÿ≥ÿ®ÿßŸÜÿÆ', image: 'assets/img/spinach.avif', valid: true },
    { name: 'ŸÖŸàÿ≤', image: 'assets/img/banana.jpg', valid: true },
    { name: 'ŸÅÿ±ÿßŸàŸÑÿ©', image: 'assets/img/strawberry.png', valid: true },
    { name: 'ŸÑŸäŸÖŸàŸÜ', image: 'assets/img/lemon.png', valid: true },
    { name: 'ÿÆÿ≥', image: 'assets/img/lettuce.jpg', valid: true },
    { name: 'ŸÅŸÑŸÅŸÑ', image: 'assets/img/pepper.jpg', valid: true },
    { name: 'ÿπŸÜÿ®', image: 'assets/img/grape.jpg', valid: true },
    { name: 'ÿ®ÿ∑ŸäÿÆ', image: 'assets/img/watermelon.avif', valid: true },
    { name: 'ÿ®ÿ±ÿ™ŸÇÿßŸÑ', image: 'assets/img/orange.avif', valid: true },
  
    // Aliments sucr√©s (valid: false)
    { name: 'ÿ≠ŸÑŸàŸâ', image: 'assets/img/candy.png', valid: false },
    { name: 'ÿ¢Ÿäÿ≥ ŸÉÿ±ŸäŸÖ', image: 'assets/img/ice.png', valid: false },
    { name: 'ŸÉÿπŸÉÿ©', image: 'assets/img/cake.avif', valid: false },
    { name: 'ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', image: 'assets/img/chocolate.avif', valid: false },
    { name: 'ÿØŸàŸÜÿßÿ™', image: 'assets/img/donut.avif', valid: false },
    { name: 'ŸÖÿ¥ÿ±Ÿàÿ® ÿ∫ÿßÿ≤Ÿä', image: 'assets/img/soda.jfif', valid: false },
    { name: 'ÿ®ÿ≥ŸÉŸàŸäÿ™', image: 'assets/img/cookie.avif', valid: false },
    { name: 'ÿ≠ŸÑŸàŸâ ÿ¨ŸäŸÑŸä', image: 'assets/img/jelly.avif', valid: false },
    { name: 'ŸÖÿµÿßÿµÿ©', image: 'assets/img/lollipop.jpg', valid: false },
    { name: 'ŸÅÿ∑Ÿäÿ±ÿ©', image: 'assets/img/pie.jpg', valid: false }
  ];

  items: any[] = [];
  validItems: any[] = [];
  invalidItems: any[] = [];

  score = 0;
  showFeedback = false;
  feedbackMessage = '';
  isCorrect = false;
  gameCompleted = false;

  ngOnInit() {
    this.resetGame();
  }

  resetGame() {
    // S√©lectionner 10 √©l√©ments al√©atoires
    this.items = this.getRandomItems(10);
    this.validItems = [];
    this.invalidItems = [];
    this.score = 0;
    this.gameCompleted = false;
  }

  // Fonction pour obtenir N √©l√©ments al√©atoires sans doublons
  getRandomItems(count: number): any[] {
    // Cr√©er une copie du tableau original
    const shuffled = [...this.originalFoodItems];
    
    // M√©langer le tableau (algorithme de Fisher-Yates)
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    
    // Retourner les N premiers √©l√©ments
    return shuffled.slice(0, count);
  }

  getStars(): number[] {
    return Array(Math.floor(this.score / 10)).fill(0);
  }

  drop(event: CdkDragDrop<any[]>) {
    if (this.gameCompleted) return;

    const item = event.item.data;
    
    // Si on d√©place dans la m√™me liste (r√©organisation)
    if (event.previousContainer === event.container) {
      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
      return;
    }

    // D√©terminer la cat√©gorie cible
    const targetCategory = event.container.id === 'validList' ? 'valid' : 'invalid';
    
    // V√©rifier si le placement est correct
    const isValid = targetCategory === 'valid' ? item.valid : !item.valid;

    if (isValid) {
      transferArrayItem(
        event.previousContainer.data,
        event.container.data,
        event.previousIndex,
        event.currentIndex
      );
      
      this.score += 10;
      this.showFeedbackMessage(`üëç ÿ£ÿ≠ÿ≥ŸÜÿ™! ${item.name} ${targetCategory === 'valid' ? 'ÿµÿ≠Ÿä' : 'ÿ≥ŸÉÿ±Ÿä'}`, true);
      this.checkGameCompletion();
    } else {
      this.showFeedbackMessage(`‚ùå ÿÆÿ∑ÿ£! ${item.name} ŸÑŸäÿ≥ ${targetCategory === 'valid' ? 'ÿµÿ≠Ÿä' : 'ÿ≥ŸÉÿ±Ÿä'}`, false);
    }
  }

  checkGameCompletion() {
    if (this.items.length === 0 && 
        (this.validItems.length + this.invalidItems.length) === 10) {
      this.gameCompleted = true;
      this.showFeedbackMessage('üéâ ŸÑŸÇÿØ ÿ£ŸÉŸÖŸÑÿ™ ÿßŸÑÿ™ÿ≠ÿØŸä ÿ®ŸÜÿ¨ÿßÿ≠! ŸÖÿ¨ŸÖŸàÿπ ŸÜŸÇÿßÿ∑ŸÉ: ' + this.score, true);
    }
  }

  private showFeedbackMessage(message: string, isCorrect: boolean): void {
    this.feedbackMessage = message;
    this.isCorrect = isCorrect;
    this.showFeedback = true;

    setTimeout(() => {
      if (this.showFeedback) {
        this.feedbackMessage += isCorrect ? '\nÿ™ÿπŸÑŸÖÿ™ ÿ¥Ÿäÿ¶ÿßŸã ÿ¨ÿØŸäÿØÿßŸã!' : '\nÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ!';
      }
    }, 1500);

    setTimeout(() => {
      this.showFeedback = false;
    }, 3000);
  }
}